import os
import re
codes_arr = [
    "rpg_objects.js",
    "rpg_managers.js",
	"rpg_core.js",
	"rpg_scenes.js",
	"rpg_sprites.js",
	"rpg_windows.js"
]



getInherit = re.compile(r'^[_a-zA-Z0-9]+(?=\.prototype=Object\.create)') # Inherit
getFather = re.compile(r'(?<=Object.create\().+?(?=\.prototype)')

getC = re.compile(r'(?<=function\s)\w+(?=\()') # get Constructor
getCN = re.compile(r'[_a-zA-Z0-9]+(?=\.prototype\.)') # get Class Name
getFN = re.compile(r'(?<=\.prototype\.)[a-zA-Z0-9]+') # if class name, get func name
getArgReg = re.compile(r'(?<=function\().*?(?=\))')  # get argument
getMemberReg = re.compile(r'(?<=this\.)_[_0-9a-zA-Z]+') # get member 



for path in codes_arr:
	fin = open(path,"r")
	if not os.path.exists(path.split('.')[0]):
		os.mkdir(path.split('.')[0])

	codes = fin.readlines()

	classes = {}
	now_in_class = ""
	for line in codes:
		line = line.split('//')
		line = line[0]
		line_no_space=line.replace(" ","")
		line_no_space=line_no_space.replace("\t","")
		tp = re.findall(getInherit,line_no_space)
		if tp!=[]: # This is an Inherit assign
			tp=tp[0] # get class name
			if not tp in classes:
				classes[ tp ] = [{},set()]
			father=re.findall(getFather,line_no_space)[0]
			classes[tp].append(father)
			continue

		tp = re.findall(getC,line)
		if tp != []:
			tp=tp[0]
			now_in_class=tp
			if not tp in classes:
				classes[ tp ] = [{},set()]

		tp = re.findall(getCN,line)
		if tp!=[]:
			tp=tp[0]
			now_in_class=tp
			if not tp in classes:
				classes[ tp ] = [{},set()]

			tp2 = re.findall(getFN,line)
			if tp2 != []:
				tp2=tp2[0]
				if tp2=='constructor':
					continue
				arg = re.findall( getArgReg,line )
				if arg != []:
					arg=arg[0]
				else:
					arg=""
				classes[ now_in_class ][0][ tp2 ] = arg
			
		
			
		if "this." in line:
			allMembers = re.findall( getMemberReg , line )
			for allmemiter in allMembers:
				classes[ now_in_class ][1].add(allmemiter)

	for cn in classes:
		cv=classes[cn]
		if os.path.exists(path.split('.')[0]+"\\"+cn+".md" ):
			continue
		fout = open(path.split('.')[0]+"\\"+cn+".md","w")
		fout.writelines(cn+"\n===\n\n")
		fout.writelines("# This document is generated by Python and has not already checked. There might be some mistakes.\n\n")
		fout.writelines("# Father:\n")
		if len(cv)==3:
			fout.writelines("* ["+cv[2]+"]("+cv[2]+".md)\n\n")
		fout.writelines("\n# Functions:\n")
		for allfc in cv[0]:
			allarg=cv[0][allfc]
			fout.writelines("* ["+allfc+"("+allarg+")]("+"#"+allfc+")\n");
		fout.writelines("\n# Members:\n")
		for allmn in cv[1]:
			fout.writelines("* "+allmn+"\n")
		fout.writelines("\n# Details:\n")
		for allfc in cv[0]:
			allarg=cv[0][allfc]
			fout.writelines("<p id="+allfc+"></p>\n\n")
			fout.writelines("* "+allfc+"("+allarg+")\n\t\n\n")
		fout.close()
		
	
	
